apiVersion: v1
kind: Namespace
metadata:
  name: kart-challenge
---
# PersistentVolumeClaim for Postgres
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: kart-challenge
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi
---
# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: kart-challenge
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - name: ENVIRONMENT
              value: "k8s"
            - name: POSTGRES_USER
              value: "user"
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "test"
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# Postgres Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: kart-challenge
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
# kart-challenge Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kart-challenge
  namespace: kart-challenge
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kart-challenge
  template:
    metadata:
      labels:
        app: kart-challenge
    spec:
      containers:
        - name: kart-challenge
          imagePullPolicy: Never
          image: kart-challenge:latest
          env:
            - name: ENVIRONMENT
              value: "k8s"
          command:
            - "sh"
            - "-c"
            - |
              sleep 60 && \
              ./kart-challenge --config ./config/config.$ENVIRONMENT.yaml
          ports:
            - containerPort: 8080
---
# kart-challenge Service
apiVersion: v1
kind: Service
metadata:
  name: kart-challenge
  namespace: kart-challenge
spec:
  type: NodePort
  selector:
    app: kart-challenge
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30080
